<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="2_open-_closed_principle_8cpp" kind="file">
    <compoundname>2Open-ClosedPrinciple.cpp</compoundname>
    <includes refid="2_open-_closed_principle_2stdafx_8h" local="yes">stdafx.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <includes local="no">fstream</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <incdepgraph>
      <node id="19">
        <label>stdafx.h</label>
        <link refid="2_open-_closed_principle_2stdafx_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="18">
        <label>C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp</label>
        <link refid="2Open-ClosedPrinciple.cpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>SDKDDKVer.h</label>
      </node>
      <node id="26">
        <label>fstream</label>
      </node>
      <node id="20">
        <label>targetver.h</label>
        <link refid="2_open-_closed_principle_2targetver_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>vector</label>
      </node>
      <node id="24">
        <label>iostream</label>
      </node>
      <node id="23">
        <label>tchar.h</label>
      </node>
      <node id="22">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_product" prot="public">Product</innerclass>
    <innerclass refid="struct_product_filter" prot="public">ProductFilter</innerclass>
    <innerclass refid="struct_specification" prot="public">Specification</innerclass>
    <innerclass refid="struct_filter" prot="public">Filter</innerclass>
    <innerclass refid="struct_better_filter" prot="public">BetterFilter</innerclass>
    <innerclass refid="struct_color_specification" prot="public">ColorSpecification</innerclass>
    <innerclass refid="struct_size_specification" prot="public">SizeSpecification</innerclass>
    <innerclass refid="struct_and_specification" prot="public">AndSpecification</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" prot="public" static="no">
        <name>Color</name>
        <enumvalue id="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1cabda9643ac6601722a28f238714274da4" prot="public">
          <name>red</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" prot="public">
          <name>green</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca48d6215903dff56238e52e8891380c8f" prot="public">
          <name>blue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp" line="19" column="1" bodyfile="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="enum" id="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" prot="public" static="no">
        <name>Size</name>
        <enumvalue id="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aeb5c1399a871211c7e7ed732d15e3a8b" prot="public">
          <name>small</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4a075a3e36a0a52dcbc568c05788e8a713" prot="public">
          <name>medium</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" prot="public">
          <name>large</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp" line="20" column="1" bodyfile="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp" bodystart="20" bodyend="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="2_open-_closed_principle_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp" line="161" column="1" bodyfile="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp" bodystart="161" bodyend="225"/>
        <references refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca48d6215903dff56238e52e8891380c8f">blue</references>
        <references refid="struct_product_filter_1ac7dde76a8bc4ed08ec15edb501bc4ff7" compoundref="2_open-_closed_principle_8cpp" startline="41" endline="52">ProductFilter::by_color</references>
        <references refid="struct_better_filter_1aa9da194971b56e495bde62309452173c" compoundref="2_open-_closed_principle_8cpp" startline="107" endline="118">BetterFilter::filter</references>
        <references refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8">green</references>
        <references refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74">large</references>
        <references refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aeb5c1399a871211c7e7ed732d15e3a8b">small</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>2Open-ClosedPrinciple.cpp<sp/>:<sp/>Defines<sp/>the<sp/>entry<sp/>point<sp/>for<sp/>the<sp/>console<sp/>application.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SingleResponsibilityPrinciple.cpp<sp/>:<sp/>Defines<sp/>the<sp/>entry<sp/>point<sp/>for<sp/>the<sp/>console<sp/>application.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="2_open-_closed_principle_2stdafx_8h" kindref="compound">stdafx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//0suppose<sp/>that<sp/>you<sp/>are<sp/>making<sp/>a<sp/>website<sp/>which<sp/>sells<sp/>certain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//products<sp/>and<sp/>your<sp/>manager<sp/>wants<sp/>you<sp/>to<sp/>be<sp/>able<sp/>to<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//those<sp/>products.<sp/>Let&apos;s<sp/>suppose<sp/>that<sp/>each<sp/>of<sp/>the<sp/>products<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//certain<sp/>traits<sp/>like,<sp/>for<sp/>example,<sp/>color<sp/>and<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>{<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1cabda9643ac6601722a28f238714274da4" kindref="member">red</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">green</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca48d6215903dff56238e52e8891380c8f" kindref="member">blue</ref><sp/>};</highlight></codeline>
<codeline lineno="20" refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" kindref="member">Size</ref><sp/>{<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aeb5c1399a871211c7e7ed732d15e3a8b" kindref="member">small</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4a075a3e36a0a52dcbc568c05788e8a713" kindref="member">medium</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">large</ref><sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="struct_product" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_product" kindref="compound">Product</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="struct_product_1acc9bddcf74112d85a6dc231db2269b8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="struct_product_1acc9bddcf74112d85a6dc231db2269b8d" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="24" refid="struct_product_1a12eef43b4dc615d569d2b07760d10bc1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/><ref refid="struct_product_1a12eef43b4dc615d569d2b07760d10bc1" kindref="member">color</ref>;</highlight></codeline>
<codeline lineno="25" refid="struct_product_1a4dfd34f7d658e42d72efa0679e96cdb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" kindref="member">Size</ref><sp/><ref refid="struct_product_1a4dfd34f7d658e42d72efa0679e96cdb3" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1<sp/>2<sp/>3<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//Product<sp/>Filter<sp/>would<sp/>be<sp/>the<sp/>wrong<sp/>way<sp/>to<sp/>do<sp/>it,<sp/>not<sp/>flexible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="33"><highlight class="comment">And<sp/>this<sp/>brings<sp/>us<sp/>to<sp/>the<sp/>open<sp/>closed<sp/>principle.</highlight></codeline>
<codeline lineno="34"><highlight class="comment">So<sp/>the<sp/>open<sp/>closed<sp/>principle<sp/>basically<sp/>states<sp/>that<sp/>your<sp/>systems<sp/>should<sp/>be<sp/>open<sp/>to<sp/>extensions<sp/>so<sp/>you</highlight></codeline>
<codeline lineno="35"><highlight class="comment">should<sp/>be<sp/>able<sp/>to<sp/>extend<sp/>systems<sp/>by<sp/>inheritance<sp/>for<sp/>example<sp/>but<sp/>closed<sp/>for<sp/>modification.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">And<sp/>unfortunately<sp/>what<sp/>we&apos;re<sp/>doing<sp/>here<sp/>is<sp/>we&apos;re<sp/>modifying<sp/>existing<sp/>code<sp/>instead<sp/>of<sp/>inheriting<sp/>and<sp/>thereby</highlight></codeline>
<codeline lineno="37"><highlight class="comment">extending<sp/>the<sp/>system<sp/>so<sp/>let&apos;s<sp/>see<sp/>if<sp/>we<sp/>can<sp/>build<sp/>a<sp/>better<sp/>filter.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="struct_product_filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_product_filter" kindref="compound">ProductFilter</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="struct_product_filter_1ac7dde76a8bc4ed08ec15edb501bc4ff7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/><ref refid="struct_product_filter_1ac7dde76a8bc4ed08ec15edb501bc4ff7" kindref="member">by_color</ref>(vector&lt;Product*&gt;<sp/>items,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>color)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/>result;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>items)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;color<sp/>==<sp/>color)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53" refid="struct_product_filter_1a9f8510cc7c9fd2e9498de6d821d240b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/><ref refid="struct_product_filter_1a9f8510cc7c9fd2e9498de6d821d240b9" kindref="member">by_size</ref>(vector&lt;Product*&gt;<sp/>items,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" kindref="member">Size</ref><sp/>size)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/>result;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>items)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;size<sp/>==<sp/>size)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65" refid="struct_product_filter_1a0fb5f0e83ab6273d8b05d3a961d9fcd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/><ref refid="struct_product_filter_1a0fb5f0e83ab6273d8b05d3a961d9fcd6" kindref="member">by_size_and_color</ref>(vector&lt;Product*&gt;<sp/>items,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" kindref="member">Size</ref><sp/>size,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>color)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/>result;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>items)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(item-&gt;size<sp/>==<sp/>size<sp/>&amp;&amp;<sp/>item-&gt;color<sp/>==<sp/>color)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>To<sp/>solve<sp/>the<sp/>problem,<sp/>we<sp/>will<sp/>use<sp/>specification<sp/>pattern:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>So<sp/>the<sp/>way<sp/>we&apos;re<sp/>going<sp/>to<sp/>do<sp/>this<sp/>is<sp/>by<sp/>defining<sp/>two<sp/>interfaces<sp/>we&apos;re<sp/>going<sp/>to<sp/>define<sp/>interfaces<sp/>called</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/>specification<sp/>and<sp/>filter.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/>So<sp/>first<sp/>of<sp/>all<sp/>define<sp/>the<sp/>specification<sp/>interface<sp/>so<sp/>template<sp/>type<sp/>name<sp/>T<sp/>and<sp/>those<sp/>is<sp/>we<sp/>using<sp/>T<sp/>so</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>doesn&apos;t<sp/>just<sp/>have<sp/>to<sp/>work<sp/>on<sp/>products<sp/>it<sp/>can<sp/>work<sp/>on<sp/>any<sp/>kind<sp/>of<sp/>type<sp/>and<sp/>it&apos;s<sp/>going<sp/>to<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>specification.<sp/>And<sp/>all<sp/>we<sp/>gonna<sp/>do<sp/>here<sp/>is<sp/>add<sp/>a<sp/>single<sp/>pure<sp/>virtual<sp/>method<sp/>called<sp/>is<sp/>satisfied<sp/>it&apos;s</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>going<sp/>to<sp/>return<sp/>and<sp/>boolean<sp/>is<sp/>going<sp/>to<sp/>be<sp/>called<sp/>is<sp/>satisfied<sp/>and<sp/>all<sp/>it<sp/>tries<sp/>to<sp/>do<sp/>is<sp/>it<sp/>tries<sp/>to</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/>check<sp/>whether<sp/>some<sp/>item<sp/>satisfies<sp/>a<sp/>particular<sp/>specification<sp/>and<sp/>the<sp/>specification<sp/>is<sp/>once<sp/>again<sp/>going</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>be<sp/>defined<sp/>through<sp/>inheritance.</highlight></codeline>
<codeline lineno="90"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="struct_specification" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_specification" kindref="compound">Specification</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_satisfied(T<sp/>*item)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="struct_specification_1a1b75a14a5836043868e13779366c4f6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_and_specification" kindref="compound">AndSpecification&lt;T&gt;</ref><sp/><ref refid="struct_specification_1a1b75a14a5836043868e13779366c4f6c" kindref="member">operator&amp;&amp;</ref>(<ref refid="struct_specification" kindref="compound">Specification&lt;T&gt;</ref>&amp;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_and_specification" kindref="compound">AndSpecification</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,other)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>Filter<sp/>is<sp/>going<sp/>to<sp/>define<sp/>the<sp/>interface<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>implemented<sp/>by<sp/>any<sp/>kind<sp/>of<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>like<sp/>a<sp/>filter<sp/>of<sp/>items,<sp/>for<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="struct_filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_filter" kindref="compound">Filter</ref><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>vector<sp/>&lt;T*&gt;<sp/>filter(vector&lt;T*&gt;<sp/>items,<sp/><ref refid="struct_specification" kindref="compound">Specification&lt;T&gt;</ref>&amp;spec)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>5<sp/>Now<sp/>a<sp/>better<sp/>filter<sp/>is<sp/>going<sp/>to<sp/>be<sp/>implemented<sp/>,<sp/>to<sp/>solve<sp/>the<sp/>problem<sp/>of<sp/>filtering<sp/>by<sp/>color,<sp/>size<sp/>...etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="struct_better_filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_better_filter" kindref="compound">BetterFilter</ref><sp/>:<sp/><ref refid="struct_filter" kindref="compound">Filter</ref>&lt;Product&gt;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107" refid="struct_better_filter_1aa9da194971b56e495bde62309452173c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector<sp/>&lt;Product*&gt;<sp/><ref refid="struct_better_filter_1aa9da194971b56e495bde62309452173c" kindref="member">filter</ref>(vector&lt;Product*&gt;<sp/>items,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_specification" kindref="compound">Specification&lt;Product&gt;</ref>&amp;spec)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="109"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/>result;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>items)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec.<ref refid="struct_specification_1a509392a90d0c98f045a8b8287b0799a2" kindref="member">is_satisfied</ref>(item))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(item);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//5<sp/>Now<sp/>we<sp/>need<sp/>the<sp/>different<sp/>specifications<sp/>that<sp/>we<sp/>want<sp/>to<sp/>be<sp/>able<sp/>to<sp/>use<sp/>to<sp/>actually<sp/>search:<sp/>(size,<sp/>color<sp/>or<sp/>size<sp/>and<sp/>color)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="struct_color_specification" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_color_specification" kindref="compound">ColorSpecification</ref><sp/>:<sp/><ref refid="struct_specification" kindref="compound">Specification</ref>&lt;Product&gt;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124" refid="struct_color_specification_1ab5cb7fe1ba7ffcdc4d6e8be64c5d8a0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/><ref refid="struct_color_specification_1ab5cb7fe1ba7ffcdc4d6e8be64c5d8a0a" kindref="member">m_color</ref>;</highlight></codeline>
<codeline lineno="125" refid="struct_color_specification_1a786795324299b99d38bebf9a43bc7cec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_color_specification_1a786795324299b99d38bebf9a43bc7cec" kindref="member">ColorSpecification</ref>(<ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>color)<sp/>:<sp/>m_color(color)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="struct_color_specification_1a2e999c507c773439e95f1766e17bd538" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_color_specification_1a2e999c507c773439e95f1766e17bd538" kindref="member">is_satisfied</ref>(<ref refid="struct_product" kindref="compound">Product</ref><sp/>*item)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="struct_product_1a12eef43b4dc615d569d2b07760d10bc1" kindref="member">color</ref><sp/>==<sp/>m_color;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="struct_size_specification" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_size_specification" kindref="compound">SizeSpecification</ref><sp/>:<sp/><ref refid="struct_specification" kindref="compound">Specification</ref>&lt;Product&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135" refid="struct_size_specification_1a4643be27a3521396c517bc3705b125cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" kindref="member">Size</ref><sp/><ref refid="struct_size_specification_1a4643be27a3521396c517bc3705b125cc" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="136" refid="struct_size_specification_1ade286302d2999f5ae4494cf2fa4f0674" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="struct_size_specification_1ade286302d2999f5ae4494cf2fa4f0674" kindref="member">SizeSpecification</ref>(<ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4" kindref="member">Size</ref><sp/>size)<sp/>:<sp/>m_size(size)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="struct_size_specification_1a0b2d8d5be0f5a53ee88bfb984172f8de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_size_specification_1a0b2d8d5be0f5a53ee88bfb984172f8de" kindref="member">is_satisfied</ref>(<ref refid="struct_product" kindref="compound">Product</ref><sp/>*item)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item-&gt;<ref refid="struct_product_1a4dfd34f7d658e42d72efa0679e96cdb3" kindref="member">size</ref><sp/>==<sp/>m_size;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//6<sp/>to<sp/>define<sp/>a<sp/>specification<sp/>of<sp/>size<sp/>and<sp/>color,<sp/>a<sp/>combinator<sp/>should<sp/>be<sp/>made</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//Look<sp/>that<sp/>SizeSpecification<sp/>annd<sp/>ColorSpecification<sp/>are<sp/>not<sp/>generic.<sp/>Are<sp/>predefined<sp/>to<sp/>work<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Size<sp/>and<sp/>Colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="struct_and_specification" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_and_specification" kindref="compound">AndSpecification</ref><sp/>:<sp/><ref refid="struct_specification" kindref="compound">Specification</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149" refid="struct_and_specification_1a4894e8864c3e2271bc816135ac3b4ebc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_specification" kindref="compound">Specification&lt;T&gt;</ref>&amp;<sp/><ref refid="struct_and_specification_1a4894e8864c3e2271bc816135ac3b4ebc" kindref="member">first</ref>;</highlight></codeline>
<codeline lineno="150" refid="struct_and_specification_1add38e3ae957f57e8e65b6e12ca291cbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_specification" kindref="compound">Specification&lt;T&gt;</ref>&amp;<sp/><ref refid="struct_and_specification_1add38e3ae957f57e8e65b6e12ca291cbe" kindref="member">second</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="struct_and_specification_1aaaa773ad9c6f5c9ed37e492e4de2dfb2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_and_specification_1aaaa773ad9c6f5c9ed37e492e4de2dfb2" kindref="member">AndSpecification</ref>(<ref refid="struct_specification" kindref="compound">Specification&lt;T&gt;</ref><sp/>&amp;first,<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_specification" kindref="compound">Specification&lt;T&gt;</ref><sp/>&amp;second)<sp/>:<sp/>first(first),<sp/>second(second){}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="struct_and_specification_1aa6d9fb5773dfc55dba815ed1417cb81e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_and_specification_1aa6d9fb5773dfc55dba815ed1417cb81e" kindref="member">is_satisfied</ref>(T<sp/>*item)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first.is_satisfied(item)<sp/>&amp;&amp;<sp/>second.is_satisfied(item);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="2_open-_closed_principle_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="2_open-_closed_principle_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_product" kindref="compound">Product</ref><sp/>apple{<sp/></highlight><highlight class="stringliteral">&quot;Apple&quot;</highlight><highlight class="normal">,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">Color::green</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aeb5c1399a871211c7e7ed732d15e3a8b" kindref="member">Size::small</ref><sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_product" kindref="compound">Product</ref><sp/>tree{<sp/></highlight><highlight class="stringliteral">&quot;Tree&quot;</highlight><highlight class="normal">,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">Color::green</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">Size::large</ref><sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_product" kindref="compound">Product</ref><sp/>house{<sp/></highlight><highlight class="stringliteral">&quot;House&quot;</highlight><highlight class="normal">,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca48d6215903dff56238e52e8891380c8f" kindref="member">Color::blue</ref>,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">Size::large</ref><sp/>};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Product*&gt;<sp/>items{<sp/>&amp;apple,<sp/>&amp;tree,<sp/>&amp;house<sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_product_filter" kindref="compound">ProductFilter</ref><sp/>pf;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>green_things<sp/>=<sp/>pf.<ref refid="struct_product_filter_1ac7dde76a8bc4ed08ec15edb501bc4ff7" kindref="member">by_color</ref>(items,<sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">Color::green</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>green_things)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>item-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>green<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//1<sp/>2<sp/>3<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>Until<sp/>here<sp/>everything<sp/>is<sp/>ok.<sp/>but<sp/>now<sp/>let&apos;s<sp/>suppose<sp/>your<sp/>manager<sp/>comes<sp/>back<sp/>to<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>says,<sp/>Can<sp/>you<sp/>also<sp/>please<sp/>filter<sp/>by<sp/>size?<sp/>and<sp/>you<sp/>end<sp/>up<sp/>copying<sp/>the<sp/>code<sp/>you&apos;ve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//written<sp/>in<sp/>by_color<sp/>and<sp/>make<sp/>another<sp/>one<sp/>named<sp/>by_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>You<sp/>have<sp/>here<sp/>a<sp/>workable<sp/>solution<sp/>but<sp/>the<sp/>problem<sp/>is<sp/>that<sp/>you&apos;ve<sp/>had<sp/>to<sp/>go<sp/>back<sp/>into<sp/>a<sp/>chunk<sp/>of<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>you&apos;ve<sp/>already<sp/>tested<sp/>and<sp/>maybe<sp/>you<sp/>already<sp/>shipped<sp/>to<sp/>the<sp/>client,<sp/>so<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>you<sp/>need<sp/>to<sp/>introduce<sp/>this<sp/>binary<sp/>compatibility<sp/>by<sp/>adding<sp/>another<sp/>interface<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>productfilter,<sp/>which<sp/>is<sp/>not<sp/>good.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3<sp/>If<sp/>your<sp/>manager<sp/>wants<sp/>to<sp/>filter<sp/>by<sp/>another<sp/>thing,<sp/>for<sp/>example<sp/>both<sp/>color<sp/>and<sp/>size,<sp/>you<sp/>would<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replicate<sp/>another<sp/>time<sp/>the<sp/>code<sp/>and<sp/>make<sp/>another<sp/>function.<sp/>This<sp/>is<sp/>very<sp/>problematic<sp/>approach<sp/>becase<sp/>we<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>for<sp/>one<sp/>problem,<sp/>we<sp/>can<sp/>have<sp/>several<sp/>functions<sp/>with<sp/>duplicated<sp/>code.<sp/>This<sp/>bring<sp/>us<sp/>to<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open-closed<sp/>principle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4<sp/>The<sp/>open-closed<sp/>principle<sp/>basically<sp/>states<sp/>that<sp/>your<sp/>systems<sp/>should<sp/>be<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>extensions<sp/>so<sp/>you<sp/>should<sp/>be<sp/>able<sp/>to<sp/>extend<sp/>systems<sp/>by<sp/>inheritance<sp/>,<sp/>for<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>closed<sp/>for<sp/>modifications<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//What<sp/>we<sp/>were<sp/>doing<sp/>here<sp/>with<sp/>ProductFilter<sp/>methods<sp/>is<sp/>modifying<sp/>existing<sp/>code,<sp/>instead<sp/>of<sp/>inheriting<sp/>or<sp/>extending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>system.<sp/>Let&apos;s<sp/>do<sp/>a<sp/>better<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5<sp/>The<sp/>way<sp/>we<sp/>are<sp/>going<sp/>to<sp/>do<sp/>this<sp/>is<sp/>by<sp/>defining<sp/>two<sp/>interfaces:<sp/>specification<sp/>and<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_better_filter" kindref="compound">BetterFilter</ref><sp/>bf;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_color_specification" kindref="compound">ColorSpecification</ref><sp/><ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">green</ref>(<ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">Color::green</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>bf.<ref refid="struct_better_filter_1aa9da194971b56e495bde62309452173c" kindref="member">filter</ref>(items,<sp/>green))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>item-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>green<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_size_specification" kindref="compound">SizeSpecification</ref><sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">large</ref>(<ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">Size::large</ref>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_and_specification" kindref="compound">AndSpecification&lt;Product&gt;</ref><sp/>green_and_large(green,<sp/><ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">large</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//7<sp/>we<sp/>can<sp/>do<sp/>the<sp/>same<sp/>in<sp/>a<sp/>shorter<sp/>manner<sp/>making<sp/>a<sp/>combined<sp/>specification<sp/>with<sp/>operator&amp;&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spec<sp/>=<sp/><ref refid="struct_color_specification" kindref="compound">ColorSpecification</ref>(<ref refid="2_open-_closed_principle_8cpp_1ab87bacfdad76e61b9412d7124be44c1ca9f27410725ab8cc8854a2769c7a516b8" kindref="member">Color::green</ref>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="struct_size_specification" kindref="compound">SizeSpecification</ref>(<ref refid="2_open-_closed_principle_8cpp_1a1c40db1d9b56c27240e420765695f1c4aafacdb0a401ccdf6b48551bbc00e8a74" kindref="member">Size::large</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>do<sp/>the<sp/>same<sp/>with<sp/>spec,<sp/>and<sp/>it<sp/>is<sp/>a<sp/>lot<sp/>shorter<sp/>because<sp/>we<sp/>do<sp/>not<sp/>need<sp/>to<sp/>create<sp/>any<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>these<sp/>variables.<sp/>The<sp/>execution<sp/>is<sp/>the<sp/>same<sp/>as<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>bf.<ref refid="struct_better_filter_1aa9da194971b56e495bde62309452173c" kindref="member">filter</ref>(items,<sp/>spec))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>item-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>green<sp/>and<sp/>large\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Just<sp/>to<sp/>summarize,<sp/>,<sp/>the<sp/>goal<sp/>of<sp/>the<sp/>open-closed<sp/>principle<sp/>is<sp/>to<sp/>avoid<sp/>having<sp/>to<sp/>jump<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>code<sp/>that<sp/>you&apos;ve<sp/>already<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Open<sp/>for<sp/>extension<sp/>meaning<sp/>that<sp/>you<sp/>can<sp/>walways<sp/>make<sp/>and<sp/>use<sp/>specification<sp/>by<sp/>extending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>inheriting<sp/>effectively<sp/>but<sp/>closed<sp/>for<sp/>modification,<sp/>which<sp/>means<sp/>that<sp/>in<sp/>the<sp/>context<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>specification<sp/>pattern<sp/>you<sp/>would<sp/>never<sp/>require<sp/>yourself<sp/>to<sp/>go<sp/>back<sp/>into<sp/>the<sp/>filter<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>getchar();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/shared/Courses/modernCppDesign/ModernC++Design/2Open-ClosedPrinciple/2Open-ClosedPrinciple.cpp"/>
  </compounddef>
</doxygen>
